--------------------------------------------------------------------------------------------------
Logic in Computer Science, ?, 2021. Time: 1h20min. No books or lecture notes allowed.
--------------------------------------------------------------------------------------------------
-Insert your answers on the dotted lines ... below, and only there.
-Do NOT modify the problems or the @nota lines.
-When finished, upload this file with the same name: exam.txt
-Use the text symbols:     &     v    -       ->          |=        A       E
   for                    AND   OR   NOT   IMPLIES   "SATISFIES"  FORALL  EXISTS  etc.,  like in:
   I  |=  p & (q v -r)     (the interpretation I satisfies the formula p & (q v -r)  ).
   You can write subindices using "_". For example write x_i to denote x-sub-i.
--------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
1) (3 points) Prove, using only the definitions of propositional logic, that the deduction rule of resolution in propo-
sitional logic is correct, that is, if from the two clauses C1 and C2 by resolution we can obtain a clause
D, then C1 ∧ C2 |= D

For this to happen, C1 needs to be of the form p & A and C2 as -p & B, in which case would give
a clause D defined as A v B.

eval_I(C1 & C2) = eval_I(D)					->
min(eval_I(C1), eval_I(C2)) = max(eval_I(A), eval_I(B))		->
min(eval_I(p v A), eval_I(-p v B) = max(eval_I(A), eval_I(B))	->
min(max(eval_I(p), eval_I(A)), max(1-eval_I(p), eval_I(B)) = max(eval_I(A), eval_I(B))

We will do it by cases
eval_I(p) = 1
	min(1, eval_I(B)) = eval_I(B) = eval_I(D)
eval_I(p) = 0
	min(eval_I(A), 1) = eval_I(A) = eval_I(D)

eval_I(D) = eval_I(A) v eval_I(B)
--------------------------------------------------------------------------------------------------
2) (3 points) Assuming you can use a SAT solver or any other algorithm, explain very briefly what you would do
and what the computational cost would be and why, to decide the following two problems:

a) Given a formula F in disjunctive normal form (DNF), decide whether F is a tautology.
Solving the tautology problem for a DNF is equivalent to solve the SAT problem with a CNF: exponential time (for now).
CNF is unsat iff -F is taut. We can convert a DNF to a CNF by moving a negation inwards

b) Given a formula F in disjunctive normal form (DNF), decide whether F is a satisfiable.
Solving SAT with DNF is the same as solving TAUT with CNF: it has a linear time cost.
If it doesn't contain a literal and its negation in a cube, it's sat, and can be done in linear time
--------------------------------------------------------------------------------------------------
3) (4 points) Let P be a set of propositional predicate symbols. Let S be a set of clauses over P and let N be a
subset of P. We define flip(N, S) to be the set of clauses obtained from S by flipping (changing the
sign) of all literals with symbols in N .
For example, flip( {p, q}, { p ∨ ¬q ∨ ¬r, q ∨ r } ) is { ¬p ∨ q ∨ ¬r, ¬q ∨ r }.
A clause is called Horn if it has at most one positive literal. A set of clauses S is called renamable
Horn if there is some N ⊆ P such that flip(N, S) is a set of Horn clauses.

a) Explain in three lines: given S and N such that flip(N, S) is a set of Horn clauses, what would
you do to efficiently decide whether S is satisfiable, and why?
I would get the set of clauses S' such that S' = flip(N, S). Then I would solve the problem with the Horn clauses,
as it has a linear time cost, and then, flip the solution of the variables that were in N. (Being flip(0) = 1 and viceversa).

b) Given an arbitrary set of clauses S, we want to decide whether it is renamable Horn and, if so,
find the corresponding N . We will do this using an algorithm based on... SAT! For each p ∈ P, we
introduce a SAT variable flipped (p) meaning that symbol p is in N . Then we add clauses for every
clause C of S and every pair of literals l and l′ in C, forbidding that after doing all flips, l and l′ both
become positive.
Explain in three lines: which clauses do you need, what is the cost of the resulting SAT-based
algorithm and why?


--------------------------------------------------------------------------------------------------
















